#!/usr/bin/env node

'use strict';

// Module dependencies
const path = require('path');
const app = require(path.join(__dirname, '..', 'app'));
const debug = require('debug')('blog');
const http = require('http');
const env = process.env.NODE_ENV || 'development';
const config = require(path.join(__dirname, '..', 'config'))[env];
const models = require(path.join(__dirname, '..', 'models'));

// Get port from environment ad store it in Express
const port = normalizePort(process.env.PORT || config.port);
app.set('port', port);
const server = http.createServer(app);

// Create db tables in the database using data models
models.sequelize.sync()
  .then(() => {
    server.listen(port, () => {
      debug('Express server listening on port', server.address().port);
    });
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch((err) => {throw err});

// Normalize a port into a number, string, or false
// use function decalaration instead of const x = () => {} due to no hoisting
function normalizePort(portInput) {

  const port = parseInt(portInput, 10);

  if (isNaN(port)) return portInput; // input is a string pipe

  if (port >= 0) return port; // input is a valid port number

  return false;
}

// Event handler for HTTP server 'error' event
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind =
    typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};

// Event handler for HTTP server 'listening' event.
function onListening() {
  const addr = server.address();
  const bind =
    typeof addr === 'string'
      ? 'Pipe ' + addr
      : 'Port ' + addr.port;

  console.log('Listing on ' + bind);
  debug('Listening on ' + bind);
}
